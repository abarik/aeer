# Munka az R-ben {#sec-munka-az-r-ben}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
```

```{r}
#| fig-align: center
#| echo: false
#| out-width: '68%'

knitr::include_graphics(path = "images/ch_04_small.png")
```

{{< pagebreak >}}

## Az *RStudio* használata `r emoji("slightly-smiling-face")` {#sec-az-rstudio-hasznalata}

::: callout-note
## Miről lesz szó? Ebben a fejezetben

-   megismerjük az *RStudio* jellemzőit és felépítését,
-   a konzolos és parancsállományos használat különbségeit,
-   a parancsállományok és a *Quarto* állományok lehetőségeit,
-   a projekt fogalmát és használatát,
-   és az *RStudio* billentyűparancsait.
:::

Miután minden szükséges szoftverkomponenst feltelepítettünk, hogyan tudjuk működésre bírni az R-t?

Tegyük fel, hogy van egy nagyon egyszerű adatfeldolgozási problémánk, szeretnénk megtudni a *Csillagok háborúja* c. film karaktereinek átlagos testmagasságát a filmben szereplő egyes fajokra jellemzően. Ha rátalálunk egy alkalmas adatbázisra, amely tartalmazza a szereplők testmagasságait és azt, hogy melyik fajhoz tartoznak, akkor még két konkrét adatelemzési lépés vár ránk:

1.  az adatbázis megnyitása,
2.  az átlagos testmagasságok meghatározása fajonként.

Korábban láttuk, hogy az R parancssoros, tehát a fenti két lépést R parancsok formájában kell megfogalmaznunk. Azonban több kérdés is felmerül ezen a ponton:

1.  hová írjuk a parancsainkat,
2.  hogyan hajtsuk őket végre, és végül,
3.  hol jelenik meg az eredmény.

Ebben a fejezetben a fenti három kérdésekre fókuszálunk, és azt a kérdést, hogy mely konkrét parancsokkal érhetjük el a célunkat a könyv további fejezeteire halasztjuk.

Máris megválaszoljuk a fenti kérdéseket. Korábban láttuk, hogy az *Alap R* telepítésével elérhetővé válik a *konzol*, ahová parancsainkat begépelve, majd {{< kbd Enter >}}-t ütve utasításokat tudunk végrehajtani. Az *RStudio* telepítésével is kapunk egy konzolt, amelynek működése megegyezik az *Alap R* konzoljával: ide is gépelhetünk parancsokat, és {{< kbd Enter >}}-rel végrehajthatjuk őket. A parancsok eredmény is itt, a konzolban fog megjelenni.

A kiinduló adatelemzési feladatunk megoldásához tehát vagy az *Alap R* vagy az *RStudio* konzoljába gépeljük be a következő parancsokat, sorról-sorra, és minden egyes sor végén üssünk {{< kbd Enter >}}-t (a konzol használatához a [-@sec-az-rstudio-konzol]. fejezetekben találunk segítséget). A `#`-el kezdődő részeket nem szükséges begépelnünk, azok nem az R-nek szólnak, hanem a megjegyzés szerepét töltik be.

```{r eval=FALSE, tidy=FALSE}
install.packages("dplyr")      # a dplyr csomag telepítése
install.packages("psych")      # a psych csomag telepítése
data(starwars, package="dplyr")  # adatbázis beolvasása csomagból
# testmagasság átlagok fajonként
psych::describeBy(starwars$height, starwars$species, fast=T, mat=T)
```

A konzol azonban nem a legkényelmesebb módja az R parancsok végrehajtásának. Ezzel minden bizonnyal egyetértenek azok, akik a fenti sorok begépelését és végrehajtását valóban elvégezték a konzolban. A konzolba gépelés helyett érdemes egy szöveges állományban összegyűjteni az adatfeldolgozáshoz kapcsolódó R parancsainkat, ugyanis ezeket később kényelmesen elküldhetjük a konzolba végrehajtásra, pont úgy, mintha közvetlenül a konzolba gépeltük volna be őket. Ezeknek a szöveges állományoknak két fajtáját ismerjük meg ebben a könyvben: a *parancsállományokat* és a *Quarto* állományokat (a [-@sec-publikacio]. fejezetben a *Quarto* állományokról többet olvashatunk).

A parancsállományok és a *Quarto* állományok létrehozásához is a legtöbb segítséget az *RStudio* nyújtja: a parancsok begépelését drámaian leegyszerűsíti, és egyben számos más kényelmi funkciót is ajánl. Hová írjuk tehát az R parancsainkat? A legjobb válasz erre a kérdésre: az *RStudio* parancsállományaiba vagy *Quarto* állományaiba. Mielőtt valóban elvégeznénk ezen állományok létrehozását, ismerkedjünk meg az *RStudio* lehetőségeivel!

### Az *RStudio* jellemzői

Fontos tisztázni, az *RStudio* használatához feltétlenül szükség van a telepített *Alap R*-re, nélküle nem tudunk R parancsokat futtatni. Jó gyakorlat, ha az *RStudio* telepítése előtt telepítjük fel az *Alap R*-t, de a fordított sorrend sem okoz problémát. Sőt, ha az *Alap R* egy új verzióját telepítjük fel, akkor a korábban telepített *RStudio* már az új verziójú R futtató környezetét fogja használni. Az *RStudio* tudása tehát a végrehajtható R parancsok tekintetében megegyezik az *Alap R* tudásával, hiszen minden utasítás, amelynek a végrehajtását az *RStudio*-ban kezdeményezzük, végső soron az *Alap R*-rel telepített interpreterhez kerül, és a végrehajtásáért ő felel ([-@fig-alaprst03]. ábra).

```{r fig.align='center', echo=FALSE, out.width='85%', fig.link='', fig.cap="Az R kényelmes használata"}
#| label: fig-alaprst03

knitr::include_graphics('images/alaprst02.png', dpi = NA)
```

Az *RStudio* elsősorban a parancsok írását könnyíti meg, segítségével a parancsok létrehozásához kapunk rendkívüli segítséget. Megjegyezzük, hogy az *RStudio* a *posit* nevű üzleti vállalkozáshoz tartozik, amely többféle terméket fejleszt. Ezek egyike az *RStudio*-nak nevezett integrált fejlesztőkörnyezet, kimondottan az R programozási nyelv számára. Foglaljuk össze, hogy melyek az *RStudio* erősségei:

-   **Parancsok írásának könnyítése.** Az R parancsok begépelését számos eszköz segíti, például a kódkiegészítés, a szintaxisnak megfelelő kódszínezés és a tippek megjelenítése.
-   **Integrált környezetben, egy felületen látjuk a munka során szükséges összes komponenst.** Az adatelemzési munka nem merül ki a parancsok begépelésében és végrehajtásában. Az R parancsokat jelentő forráskódon kívül kezelnünk kell az outputot, ami lehet szöveges és ábra jellegű is, valamint el kell igazodnunk a memóriában tárolt adatok között is. Sokszor a súgót is meg kell jelenítenünk, és információval kell rendelkeznünk a telepített csomagokról is. Az *RStudio* nagy előnye, hogy mindezt egyetlen integrált felületen láthatjuk és ezen keresztül vezérelhetjük.
-   **Projektek használata.** Az *RStudio* támogatja a projektek használatát is, amellyel az adott adatfeldolgozási folyamat összetevőit -- az adatállományokat, parancsállományokat, *Quarto* állományokat, képállományokat és dokumentációkat --, egyetlen könyvtárba foghatjuk össze, és a forráskódból relatívan hivatkozhatunk ezekre az állományokra.
-   **Publikálás támogatása.** A *Quarto* segítségével kényelmesen és reprodukálható módon hozhatunk létre például PDF, HTML és Word formanyelvű dokumentumokat, vagy PDF, HTML és PowerPoint bemutatókat.
-   **További lehetőségek.** Az *RStudio* támogatja a Shiny Webes alkalmazások fejlesztését, de saját csomagok létrehozásához is kapunk segítséget. Az *RStudio* támogatja a Git verziókezelő használatát is.

Az *RStudio* fenti lehetőségeinek bemutatása külön könyvet igényelne, de a mindennapi munkához szükséges ismereteket most bemutatjuk.

### Az *RStudio* felépítése {#sec-az-rstudio-felepitese}

Az *RStudio* indítása után egy több panelból álló alkalmazást látunk. Első indításnál három részre van osztva az alkalmazás, vagyis három panel látható, de a tipikus használat során négy panelünk van. Válasszuk ki először a `File / New file / R Script` menüpontot, amely egy új parancsállomány létrehozását kezdeményezi. E lépés után már biztosan a négy-paneles, [-@fig-rstudio-01]. ábrán látható elrendezést kapjuk. Az ábrán megneveztük az egyes részeket, a két bal oldali panel a *Forrás* és a *Konzol*, a jobb oldaliak a *Környezet* és az *Ábra*. Figyeljük meg, hogy a panelek tetején fülek láthatók, így az egyes paneleken különböző lapokat tudunk kiválasztani, egy panel tehát több lapot is tartalmazhat. A panelek szélessége és magassága állítható, egyrészt az elválasztó sávokat az egér segítségével mozgathatjuk, másrészt a panelek méretező gombjain (az egyes panelek jobb felső sarkában) is kattinthatunk. A méretezés során eltűnhetnek panelek, de a sávok mozgatásával vagy a `View / Panes / Show All Panes` menüponttal láthatóvá tehetjük az összes panelt.

```{r fig.align='center', echo=FALSE, out.width='85%', fig.link='', fig.cap="Az RStudio tipikus képernyőképe"}
#| label: fig-rstudio-01

knitr::include_graphics('images/rstudio_01.png', dpi = NA)
```

A legtöbb időt a *Forrás* nevű bal felső panelben töltjük, mert alapértelmezetten itt jelennek meg a parancsállományok és a *Quarto* állományok lapjai. Az R parancsainkat tehát ide írjuk. Az *RStudio* első indításánál ez a panel üres, de a további indításoknál a korábban szerkesztett, de be nem zárt lapok automatikusan megnyílnak. Itt helyeztünk el korábban egy parancsállomány lapot a `File / New file / R Script` segítségével. Ez a lap egy egyszerű szövegszerkesztő. Győződjünk meg erről, próbáljuk ki, mert a jövőben ebben a szövegszerkesztőben töltjük a legtöbb időt! A fejezet végi kitűzött feladatok között rákérdezünk a szövegszerkesztési ismeretekre. Oldjuk meg most azt a feladatot, majd térjünk vissza ide!

A bal alsó panel a *Konzol* nevet viseli, vagyis ez az *RStudio* konzolja, melynek használata és célja megegyezik az *Alap R* konzoljával. Vagyis begépelhetünk parancsokat, és az {{< kbd Enter >}}-rel végrehajtjuk őket. Azonban a konzol mindössze egysoros szövegszerkesztési lehetőséget kínál, lényegében egyszerre egy parancs begépelésére és végrehajtására van lehetőségünk. Ez lényegesen eltér a *Forrás* panel parancsállomány vagy *Quarto* lapján lévő teljes értékű szövegszerkesztőtől, ahol több sor begépelésére és végrehajtására van lehetőségünk. A konzol azonban mégis központi szerepet kap, mert alapesetben az R csak a konzolba kerülő parancsokat tudja végrehajtani. A parancsállományok és *Quarto* állományok R parancsait is valahogyan át kell ide irányítani, úgy mintha ide gépeltük volna be őket. De a konzol nem csak a parancsainkat, azaz az inputot, hanem azok eredményét, az outputot is tartalmazza.

A két jobb oldali panel többfunkciós. A jobb felső, *Környezet* panelben jelennek meg a munka során létrehozott objektumok nevei (*Environment* lap), valamint a parancsok története (*History* lap). Az *Environment* lapon megjelenő adatbázis nevén kattintva a *Forrás* panelben egy külön lapon megjelenik az adatbázis tartalma, így kapjuk az ún. adatbázis lapot. A jobb alsó *Ábra* panel tartalmazza a súgót (*Help* lap), a munka során rajzolt ábráinkat (*Plot* lap), a csomagjaink listáját (*Packages* lap) és a munkakönyvtárunk állományait, könyvtárait (*Files* lap). A két jobb oldali panel elnevezés önkényes volt, hiszen az *Environment* és a *Plot* csak egy-egy lap neve ezeken a többfunkciós paneleken.

### Az *RStudio* beállításai

Mielőtt elkezdjük a munkát az *RStudio*-ban feltétlenül módosítsunk néhány alapbeállítást. Az *RStudio* működését az `Tools / Global Options` menüpont alatt változtathatjuk meg.

**UTF-8 kódolás beállítása.** A fenti menüpont kiválasztása után a bal oldali listából a `Code`, majd a fenti opciók közül a `Saving` opciót válasszuk. A [-@fig-rstudio-utf8]. ábrán is látható módon, érjük el, hogy a `Default text encoding` alatt az `UTF-8` legyen kiválasztva. Fontos, hogy minden szöveges állományunk UTF-8 kódolású legyen.

```{r fig.align='center', echo=FALSE, out.width='70%', fig.link='', fig.cap="Az UTF-8 beállítása az RStudio-ban"}
#| label: fig-rstudio-utf8

knitr::include_graphics('images/rstudio_utf8.png', dpi = NA)
```

**A munkaterület automatikus mentésének tiltása.** A bal oldalon a `General` menüpont kiválasztása után a `Basic` opció alatt vegyük ki a pipát a `Restore .RData into workspace at startup` elől, valamint a `Save workspace to .RData on exit` választót állítsuk `Never`-re ([-@fig-rstudio-rdata]. ábra). Az *RStudio* projekt szemléletű használata mellett erre a mentési funkcióra nincs szükség.

```{r fig.align='center', echo=FALSE, out.width='70%', fig.link='', fig.cap="A munkaterület automatikus mentésének tiltása az RStudio-ban"}
#| label: fig-rstudio-rdata 

knitr::include_graphics('images/rstudio_rdata.png', dpi = NA)
```

**Az output megjelenítésének tiltása a Quarto lapon.** A bal oldalon az `R Markdown` menüpont kiválasztása után vegyük ki a pipát a `Show output inline for all R Markdown documents` elől ([-@fig-rstudio-inline]. ábra). Ez a beállítás gördülékenyebb szerkesztést biztosít a *Quarto* lapokon.

```{r fig.align='center', echo=FALSE, out.width='70%', fig.link='', fig.cap="Az output megjelenítésének tiltása a *Quarto* lapon"}
#| label: fig-rstudio-inline 

knitr::include_graphics('images/rstudio_inline.png', dpi = NA)
```

Opcionális lehetőségként a panelek tartalmán is változtathatunk a `Tools / Global Options / Pane Layout` menüpontban. Az *RStudio* színösszeállításán az `Appearance` menüpont `Editor theme` beállításával változtathatunk. Javasolt a `Tomorrow Night Bright` vagy más, sötétebb háttérszínnel rendelkező téma használata.

### Az *RStudio* konzol {#sec-az-rstudio-konzol}

Az *RStudio* konzolja a *Konzol* panel egyik lapján található ([-@fig-rstudio-01]. ábra). A konzol az *RStudio* kulcsfontosságú része, korábban láttuk, hogy minden R parancsot a végrehajtás előtt ide kell irányítani. Végrehajtása után a szöveges eredmények is itt jelennek meg, és a hibaüzeneteket is itt olvashatjuk. Láthatjuk tehát, hogy a konzol figyelmünk középpontjában áll a munka során.

Közvetlenül azonban nagyon ritkán gépelünk parancsot a konzolba, erre a *Forrás* panel parancsállomány vagy *Quarto* lapját fogjuk használni. Ebben a részben mégis a konzolt mutatjuk be, ugyanis meghatározó szerepe miatt értenünk kell működését.

A konzol működése nagyon egyszerű:

1.  egysoros parancsokat gépelünk be a `>` prompt után,
2.  {{< kbd Enter >}}-t nyomunk,
3.  az R interpreter értelmezi és végrehajtja a begépelt parancsot, és
4.  megjelenik az eredmény vagy egy hibaüzenet.

Ezt követően egy újabb sor begépelésére van lehetőségünk, {{< kbd Enter >}} után annak az értelmezése következhet, majd az eredmény megjelenítése jön, és így tovább.

Próbáljuk ki mi is a konzolt! Bátran gépeljünk be parancsokat. Például a `citation()` parancs outputja fontos lehet az R-el végzett munkáink publikálásánál, hiszen megmutatja hogyan hivatkozhatunk az R statisztikai programra, vagy valamelyik csomagjára.

``` markdown
> citation()
> citation(package = "ggplot2")
```

Fontos információ az *Alap R* és az *RStudio* pontos verziószáma, ezt a információt az `R.Version()` és a `RStudio.Version()` függvény szolgáltatja. Gépelésnél vigyázzunk a kis- és nagybetűk helyes bevitelére, mert az R megkülönbözteti ezeket.

``` markdown
> R.Version()       
> RStudio.Version()
```

A konzol lehetőségeinek szisztematikus megismerését folytassuk egy egyszerű paranccsal:

``` markdown
> 1+2
[1] 3
```

A konzolban most is megjelent az eredmény, ahogy ezt az összes eddigi parancsunk esetében láthattuk. Azonban nem minden parancs után jelenik meg output a konzolban. Például a következő parancsnak nincs eredménysora a konzolban, de ez messze nem jelenti azt, hogy nem történt semmi (történt: létrehoztunk egy objektumot).

``` markdown
> x <- 3
```

Sőt, az is előfordulhat, hogy az R nem talált valamit rendben a parancsban. Ekkor természetesen nem hajtja/hajthatja végre a begépelt sort, helyette hibát jelez.

``` markdown
> Ez nem lesz jó.
```

A válasz a fenti "parancsra" az `Error: unexpected symbol in "Ez nem"` hibaüzenet lesz. Alapvető szabály, ha a válaszban megjelenik az `Error` szócska, akkor a parancsunkat valamilyen ok miatt nem tudta végrehajtani az R értelmező, és az `Error` utáni részből tájékozódhatunk a hiba okáról. Minden más esetben sikeres volt a végrehajtás.

Hosszabb, bonyolult parancsok gépelésénél gyakran előfordul, hogy valamiért nem sikerül "teljessé" tenni a begépelt parancsot, valami még hiányzik belőle (például egy záró kerek zárójel). Ezt az R értelmező észreveszi és az {{< kbd Enter >}} megnyomása után egy `+` folytatás prompt megjelenítésével jelzi ezt számunkra. A `+` prompt után van lehetőségünk a hiányzó részek pótlására, majd ha készen vagyunk az {{< kbd Enter >}} billentyűvel az összes eddig még végre nem hajtott sort elküldhetjük az értelmezőnek.

Gépeljük be a következő parancsot, három egymás utáni sorba, {{< kbd Enter >}}-ekkel elválasztva.

``` markdown
> paste("Ez már",
+        "jó"
+       )
[1] "Ez már jó"
```

A `paste("Ez már",` kerüljön az első sorba, majd nyomjunk {{< kbd Enter >}}-t. Az R nem hajtja végre a sort, de erre a nyilvánvalóan hibás, befejezetlen parancsra hibaüzenetet sem jelenít meg. Helyette felajánlja a parancs folytatását, befejezését egy új sorban, amely már a `+` prompttal kezdődik. A második sorba gépeljük be az `"jó"` karaktersorozatot, nyomjuk meg az {{< kbd Enter >}}-t. Sajnos még ez sem tette teljessé a parancsunkat, így további folytatásra van lehetőségünk a `+` után a harmadik sorban. Ide gépeljük be a hiányzó `)` részt, és üssünk {{< kbd Enter >}}-t. A parancsunk teljessé vált, megkapjuk az eredményt a konzolban, pontosan úgy, mintha a három sort egyetlen sorba gépeltük volna.

Legyünk nagyon óvatosak a konzol folytatás prompt funkciójával. Ha például az R nem találja a parancs hiányzó részét, akkor a konzol ezen kényelmi funkciója oda vezethet, hogy folyamatosan a `+` promptot kapjuk az {{< kbd Enter >}} megnyomása után. Ezt a helyzetet hivatott megoldani az {{< kbd ESC >}} billentyű, mellyel megszakíthatjuk az értelmező parancsfeldolgozási kísérletét. Az {{< kbd ESC >}} megnyomása után visszakapjuk a `>` prompttal kezdődő (üres) sort, vagyis tiszta lappal, új, lehetőség szerint teljes parancs gépelésébe kezdhetünk. **A parancssorba mindig teljes parancsot gépeljünk, amint megjelenik a `+` folytatás prompt, azonnal szakítsuk meg az {{< kbd ESC >}} megnyomásával az értelmezési folyamatot.**

Az R konzolos használatát két funkció valóban kényelmesebbé teszi. Egyrészt a korábban végrehajtott parancsainkat visszahívhatjuk, lapozhatunk bennük előre, hátra. Erre a {{< kbd FEL/LE NYÍL >}} billentyűkkel van lehetőségünk. Ezt *history*-nak is nevezzük, vagyis a parancsok történetének. Természetesen, az így visszahívott parancsot tetszőleges módon átszerkeszthetjük: navigálhatunk a sorban előre hátra, beszúrhatunk/törölhetünk karaktereket vagy használhatjuk a vágóasztal billentyűparancsait. A visszahívott és módosított parancsot az {{< kbd Enter >}} segítségével újra végrehajthatjuk, és ehhez még a sor végére sem kell a szövegkurzort pozicionálni, az a sorban tetszőleges helyen állhat, az R mégis a teljes sort fogja értelmezni.

A másik kényelmi lehetőség a {{< kbd TAB >}} billentyű használata, amellyel az elkezdett, de még be nem fejezett sorokat egészíthetjük ki. Ha egy sort többféleképpen is kiegészíthet az R, akkor egy listát kapunk a lehetőségekről, amelyet továbbgépeléssel szűkíthetünk, ha pedig csak egyetlen szóba jöhető befejezése van a begépelt karaktereknek, akkor a {{< kbd TAB >}} megnyomása után ezzel a résszel kiegészül az elkezdett sorunk. Így nemcsak egyszerűen gépelést, illetve időt takaríthatunk meg, hanem például tájékozódhatunk a korábban létrehozott objektumok nevéről vagy az elérhető függvények névéről és paramétereiről is.

Az objektum, a függvények és az egyéb ebben a fejezetben homályosan hagyott fogalmak definícióit a könyv későbbi részeiben részletesen tárgyaljuk.

### Parancsállományok {#sec-parancsallomanyok}

Láthattuk, hogy a konzolba egyszerre csak egy parancsot gépelhetünk be, úgy is gondolhatunk a konzolra, mint egy egysoros szövegszerkesztőre. Begépelünk egy sort és végrehajtjuk az {{< kbd Enter >}}-rel. A problémáink többsége viszont nem oldható meg egyetlen paranccsal, csak több tízzel vagy százzal, ezért ez az interaktív, *konzolos használat* nem alkalmas hosszabb elemzésre.

Parancsainkat begépelhetjük egy `.R` kiterjesztésű, egyszerű, formázás nélküli szöveges állományba is. Az ilyen szöveges állományt *parancsállomány*nak vagy *szkriptállomány*nak nevezzük. Ilyen szöveges állományok létrehozására tetszőleges szövegszerkesztő alkalmas, de természetesen mi az *RStudio* segítségével fogjuk ezeket elkészíteni, ugyanis itt kapjuk a legnagyobb segítséget a parancsok gépeléséhez, majd végrehajtásához. A *Forrás* panel tartalmazza a parancsállomány lapokat, létrehozásuk a korábban látott `File / New file / R Script` menüponttal történik. Parancsállományok mentésére és már létező megnyitására is van lehetőségünk a megfelelő menüpont kiválasztásával (`File / Save` és `File / Open File`).

A parancsállományok használata lényegesen leegyszerűsíti az adatelemzés folyamatát, hiszen a konzol egysoros szövegszerkesztője helyett egy szinte végtelen sok parancssor begépelésére alkalmas szövegszerkesztő áll rendelkezésünkre. Mint minden szövegszerkesztőben, a különböző billentyűparancsok és a vágóasztal itt is megkönnyíti szerkesztés folyamatát. Az {{< kbd Enter >}} jelentése parancsállományos környezetben a szövegszerkesztőkben megszokott speciális "újsor" karakter beszúrása, ami lényegesen különbözik a konzolos használat parancs végrehajtási funkciójától. A parancsaink interaktív végrehajtásáért az *RStudio*-ban a `Code / Run selected line(s)` menüpont, vagy még gyakrabban a {{< kbd Ctrl-Enter >}} billentyűkombináció felel. Ezekkel a módszerekkel tudjuk a parancsainkat a konzolba irányítani és végrehajtani. De nézzük meg ezt a gyakorlatban!

### Munka az *RStudio*-ban {#sec-munka-az-rstudio-ban}

Kezdjük a munkát! Nyissunk egy új parancsállományt (`File / New file / R Script`) és gépeljünk be néhány sort. Figyeljük meg, hogy milyen sokat segít az *RStudio* a lenti sorok begépelésében. Az értékadás (`<-`) operátort az {{< kbd Alt-- >}} billentyűkombináció segítségével vigyük be.

```{r eval=FALSE, tidy=FALSE}
1+23
getwd()          # munkakönyvtár kiírása
x <- mean(1:100)
plot(1:10)
?mean
cat("- Vége -\n")
```

A szövegkurzorral álljunk az első sorra, és hajtsuk végre {{< kbd Ctrl-Enter >}} billentyűparancsot. Láthatjuk, hogy (1) a sor átkerül a konzolba, (2) az *RStudio* végrehajtja a sort és az eredményt a konzolban megjeleníti, és (3) a szövegkurzor lejjebb lép a következő végrehajtható sorra. Egy újabb {{< kbd Ctrl-Enter >}} így már ezt a sort hatja végre, és így tovább. Ha a sorok végrehajtása közben hibaüzenetet kapunk (`Error`), ne essünk kétségbe, a hibaüzenet a munka része. Nézzük át figyelmesen a begépelt sorainkat, javítsuk őket, és futtassuk újra az összes sort, fentről lefelé a {{< kbd Ctrl-Enter >}}-ek segítségével.

A parancsok végrehajtása során láthatjuk mennyire kényelmes, integrált környezetben találtuk magunkat. Az `x <- mean(1:100)` hatására az *Environment* lapon megjelent az `x` objektum neve és értéke. A *Plot* lapon láthatunk egy ábrát, amit a `plot(1:10)` rajzolt meg, és a `?mean` a *Help* lapon mutatja meg a `mean()` átlagszámoló függvény beépített súgóját.

Mentsük el parancsállományunkat a `File / Save` vagy a {{< kbd Ctrl-S >}} segítségével. Korábban létrehozott parancsállományokat a `File / Open` menüponttal nyithatunk meg.

A soronkénti végrehajtás mellett nagyon gyakori a kijelölt szövegrészek végrehajtása, amit szintén a {{< kbd Ctrl-Enter >}}-rel tudunk kezdeményezni. A kijelölt rész lehet több sor, a teljes parancsállomány, vagy valamelyik sor egy része. Ez utóbbi próbáljuk ki úgy, hogy a parancsállomány első sorában csak az `1+2` részt jelöljük ki, és ezt hajtsuk végre a {{< kbd Ctrl-Enter >}} segítségével. Az eredmény a konzolban a 3 lesz. A teljes szkriptállomány végrehajtásához jelöljük ki {{< kbd Ctrl-A >}} segítségével a parancsállomány összes sorát, és nyomjuk meg a {{< kbd Ctrl-Enter >}}-t. A konzolban tudjuk ellenőrizni, hogy minden sort újra végrehajtottunk.

Térjünk vissza a kiinduló adatelemzési problémánk megoldásához. Láttuk, hogy az R parancsok összegyűjtésére és végrehajtására a `.R` kiterjesztésű parancsállományok kiváló megoldást nyújtanak. Emlékezzünk vissza a fejezet eleji példára, amelyben a Csillagok háborúja c. film karaktereinek átlagos testmagasságát kerestük. Nyissunk egy új parancsállományt (`File / New file / R Script`) és gépeljük be a megoldást jelentő sorokat.

```{r eval=FALSE, tidy=FALSE}
# A Csillagok háborúja c. film karaktereinek átlagos testmagassága
# Abari Kálmán
# 2025. 04. 30.

# install.packages("dplyr")      # a dplyr csomag telepítése
# install.packages("psych")      # a psych csomag telepítése
data(starwars, package="dplyr")  # adatbázis beolvasása csomagból
# testmagasság átlagok fajonként
psych::describeBy(starwars$height, starwars$species, fast=T, mat=T)
```

Látható, hogy a feladat tényleges megoldását jelentő két R parancs mellett megjegyzéseket is becsempésztünk, hogy később is tudjuk, ki, mikor és miért készítette ezt a parancsállományt (a `#` utáni részeket a sor végéig az R figyelmen kívül hagyja; részletesebb információkat a megjegyzésekről a [-@sec-MegjegyzesazRben]. fejezetben olvashatunk). Futtassuk a sorokat a {{< kbd Ctrl-Enter >}} segítségével, fussuk át a kiszámolt átlagos testmagasságokat az output `mean` oszlopában, majd mentsük el a szkriptállományt {{< kbd Ctrl-S >}}-sel `starwars.R` néven. Később, napok, hetek vagy hónapok múlva, újra megnyithatjuk `starwars.R` állományunkat (`File / Open`), és újra lefuttathatjuk mini-elemzésünket. Ezzel a fejezet eleji adatelemzési feladatunkat megoldottuk. Vajon lehet ezt ennél jobban csinálni? Igen!

### *Quarto* állományok {#sec-quarto-allomanyok-1}

Az R parancsainkat olyan `.qmd` kiterjesztésű, egyszerű, szöveges állományokban is összegyűjthetjük, amelyek többet nyújtanak, mint a parancsállományok, de szerkezetük kicsit kötöttebb. Az ilyen szöveges állományok a *Quarto* állományok. Miben nyújtanak többet: ahogyan a [-@sec-publikacio]. fejezetben részletesen áttekintjük, a *Quarto* állományok az eredmények publikálásához, például HTML, PDF vagy Word formanyelvű állományok létrehozását teszik lehetővé.

Hozzunk létre az *RStudio*-ban a `File / New File / Quarto Document` menüponttal egy új *Quarto* állományt. A megjelenő dialógusdobozban töltsük ki a `Title` és `Author` mezőket, azaz adjunk címet és szerzőt a dokumentumhoz, majd kattintsunk az {{< kbd OK >}} gombon. A `Forrás` panelen megjelenik egy új *Quarto* lap, amely egy alapértelmezett tartalommal jön létre, és nem üresen, mint a parancsállományok esetében. Említettük, hogy a *Quarto* állományok szerkezete kötöttebb, ez az alapértelmezett tartalom az eligazodásban segít minket. Érjük el, hogy az új *Quarto* állomány ezeket a sorokat tartalmazza (a szerző neve a sajátunk legyen):

```{r echo = FALSE, comment = ""}
cat(readr::read_file("quarto/starwars.qmd"))
```

Minden *Quarto* állomány egy fejléccel kezdődik, amelyet a `---` karakterek határolnak. A természetes nyelvű szöveget szabadon a fejléc alatti részben bárhová írhatjuk, az R parancsokat azonban ún. R csonkokban kell elhelyeznünk, amelyeket speciális kezdő és záró sorok határolnak. A [-@sec-publikacio]. fejezetben részletesebben olvashatunk ezekről. Most elégedjünk meg annyival, hogy egy *Quarto* állományban tetszőlegesen sok R csonkot elhelyezhetünk, és egy R csonk tetszőlegesen sok R parancsot tartalmazhat. Egy R csonkon belül a parancsok végrehajtása ugyanúgy {{< kbd Ctrl-Enter >}}-rel történik, mint a parancsállományok esetében. Próbáljuk ki! A most begépelt *Quarto* állományunk egyes csonkjában lévő R parancsokat hajtsuk végre {{< kbd Ctrl-Enter >}}-ek segítségével. A mini-elemzés eredménye ismét a konzolban látható.

Hogyan foglalhatnánk össze a parancsállományok és a *Quarto* állományok közötti különbséget? A [-@tbl-parancsrmarkdown]. táblázatban láthatjuk, hogy mindkét állományban összesen három különböző tartalmat szoktunk rögzíteni:

1.  fejléc információt arról, hogy mi az elemzés célja, ki és mikor készítette az állományt,
2.  magyarázó, természetes nyelvű szöveget (pl. magyar vagy angol nyelven), és
3.  az adatelemző R parancsokat.

Az R parancsokat szabadon írhatjuk a parancsállományokba, viszont a fejléc információt és a magyarázó szövegeket megjegyzésbe kell tenni. A *Quarto* állományokba a magyarázó, természetes nyelvű szövegek írhatók szabadon, míg az R parancsokat csonkokba, a fejléc információt pedig kötött módon, az állomány elejére kell írnunk.

| Tartalom                  | Parancsállomány (`.R`) | *Quarto* (`.qmd`)  |
|---------------------------|------------------------|--------------------|
| *Fejléc szöveg*           |                        |                    |
| cím, szerző, dátum        | megjegyzésbe           | fejlécbe           |
| *Magyarázó szöveg*        |                        |                    |
| természetes nyelvű szöveg | megjegyzésbe           | bárhová            |
| *Adatelemzés*             |                        |                    |
| R parancs                 | bárhová                | R csonkba          |

: A parancsállomány és a *Quarto* állomány összehasonlítása {#tbl-parancsrmarkdown}

Valóban annyiban áll a különbség a két állománytípus között, hogy a máshová és máshogyan írjuk az R parancsokat és az egyéb magyarázó/fejléc szövegeinket? Nem. A [-@sec-publikacio]. fejezetben részletesen bemutatjuk, hogy a *Quarto* állományok ereje abban van, hogy egy fordítási folyamat (*render*elés) során, olyan PDF, HTML vagy Word állományt tudunk előállítani, amely a magyarázó/fejléc szövegeken, és az R parancsokon kívül, az R parancsok outputját is tartalmazza, legyen az szöveges vagy ábra jellegű output.

### Projektek használata {#sec-projektek-hasznalata}

Mostanra nagyon közel kerültünk az általunk ajánlott adatelemzési munkaformához, ugyanis már tudunk az *RStudio*-n belül parancsállományokat és *Quarto* állományokat használni. Még egy összetevő azonban kulcsfontosságú a kényelmes munkához: az *RStudio*-ban minden esetben projektet kell használnunk.

Az *RStudio* lehetőséget ad arra, hogy minden egyes adatfeldolgozási feladatunkhoz egy projektet rendeljünk. Egy *RStudio* projekt minimálisan egy projekt könyvtárat és az ebben lévő lévő `.Rproj` kiterjesztésű projektállományt jelenti. Ezeket a következő módszerrel hozhatjuk létre. Először kattintsunk a `File / New Project` menüponton. Válasszuk ki a `New Directory` opciót ([-@fig-rstudio-proj-1]. ábra), majd a `New Project` nyomógombon kattintsunk ([-@fig-rstudio-proj-2]. ábra).

```{r rstudio-proj-1, fig.align='center', echo=FALSE, out.width='65%', fig.link='', fig.cap="RStudio projekt létrehozása: 1. lépés"}
#| label: fig-rstudio-proj-1

knitr::include_graphics('images/rstudio_proj_1.png', dpi = NA)
```

A `Directory name` szöveges mezőbe a projektünk nevét határozhatjuk meg, ami egyben az új projektünk könyvtárneve is lesz. Adjuk meg itt az `elso_projekt` nevet. A `Create project as subdirectory of` mezőben azt a szülő könyvtárat határozhatjuk meg, ahová a projekt könyvtárunkat el szeretnénk helyezni. Ezt szabadon megválaszthatjuk, lehet az adott felhasználó dokumentumok könyvtára is. A projekt létrehozását a `Create Project` nyomógombbal fejezhetjük be.

```{r fig.align='center', echo=FALSE, out.width='65%', fig.link='', fig.cap="RStudio projekt létrehozása: 2. lépés"}
#| label: fig-rstudio-proj-2

knitr::include_graphics('images/rstudio_proj_2.png', dpi = NA)
```

Két nagyon fontos dolog történt a fentiek hatására. Egyrészt a számítógépünkön létrejött az `elso_projekt` projektkönyvtár, és benne az `elso_projekt.Rproj` projektállomány, másrészt az *RStudio* ún. *projekt üzemmód*ba került, azaz az `elso_projekt` lesz az aktív projekt. Az *RStudio*-ban egyszerre egy projekt lehet aktív, de elképzelhető, hogy egyetlen projekt sem aktív. Az *RStudio* felületén a jobb felső sarokban tájékozódhatunk, ahol most az `elso_project` feliratot látjuk, de amennyiben nincs aktív projektünk, akkor a `Project: (none)` feliratot olvashatjuk. Kerüljük a projekt nélküli állapotot.

```{r fig.align='center', echo=FALSE, out.width='65%', fig.link='', fig.cap="RStudio projekt létrehozása: 3. lépés"}
#| label: fig-rstudio-proj-3

knitr::include_graphics('images/rstudio_proj_3.png', dpi = NA)
```

Minden adatfeldolgozási feladathoz -- még a legkisebbhez is -- hozzunk létre projektet. Minden állományt, amely a feladathoz tartozik a projektkönyvtáron belül helyezzünk el. Milyen állományok jöhetnek szóba: például parancsállományok, *Quarto* állományok, adatállományok, képállományok, dokumentációk és hivatkozásokat tartalmazó állományok. Érdemes ezeket rendezetten, ha szükséges, alkönyvtárakba szétosztva tárolni. Jó gyakorlat lehet, hogy a parancsállományokat és a *Quarto* állományokat közvetlenül a projektkönyvtárban (most ez az `elso_projekt`), az adatállományokat egy `adat` alkönyvtárban a projektkönyvtáron belül (most `elso_projekt/adat`) tároljuk, a képállományok és dokumentációk helye pedig lehet az `elso_project/kep`, illetve `elso_projekt/doku` alkönyvtár.

Válthatunk egy másik projektre is (`File / Open Project`), de be is zárhatjuk az aktív projektet (`File / Close project`). Később újra megnyithatjuk ezt is a `File / Open Project` segítségével. A megnyitás során természetesen az `.Rproj` kiterjesztésű projektállományt kell kiválasztanunk.

Ritkábban az is előfordulhat, hogy az adatfeldolgozási folyamatunkkal kapcsolatos állományok összegyűjtését korábban elkezdtük, és csak később szeretnénk ezt a könyvtárat egyben *RStudio* projektkönyvtárként is felhasználni.

```{r fig.align='center', echo=FALSE, out.width='65%', fig.link='', fig.cap="RStudio projekt létrehozása: létező könyvtár megadása"}
#| label: fig-rstudio-proj-4

knitr::include_graphics('images/rstudio_proj_4.png', dpi = NA)
```

Korábban létrehozott könyvtárból szintén a `File / New Project` menüpont segítségével hozhatunk létre *RSudio* projektkönyvtárat. Itt azonban az `Existing Directory` opciót kell kiválasztani ([-@fig-rstudio-proj-1]. ábra). Ezt követően ennek a létező könyvtárnak az elérési útját kell megadnunk az [-@fig-rstudio-proj-4]. ábrán látható beviteli mezőben.

Végül foglaljuk össze, milyen előnyökkel jár a projekt használata:

-   a logikailag egy adatfeldolgozási folyamathoz tartozó állományainkat fizikailag is együtt tudjuk tartani.
-   projekt üzemmódban az *RStudio* az aktuális könyvtárat a projektkönyvtárra állítja, így relatív hivatkozást használhatunk a kódunkban, amely a projekt hordozhatóságát biztosítja különböző számítógépek között.

### Billentyűparancsok

Az *RStudio* legfontosabb billentyűparancsa a {{< kbd Ctrl-Enter >}}, amely a parancsot a konzolba küldi végrehajtásra. Van még néhány további billentyűparancs, amelyet érdemes felsorolni, hiszen ezek használatával gyorsítani, egyszerűsíteni tudjuk a munkánkat.

-   {{< kbd Ctrl-Shift-N >}}: új parancsállomány létrehozása,
-   {{< kbd Ctrl-S >}}: állomány mentése,
-   {{< kbd Ctrl-W >}}: lap bezárása a `Forrás` panelen,
-   {{< kbd Ctrl-Tab >}} / {{< kbd Ctrl-Shift-Tab >}}: aktív lap léptetése előre és hátra a `Forrás` panelen,
-   {{< kbd Ctrl-F >}}: szöveg keresése és cseréje,
-   {{< kbd Tab >}}: kód kiegészítése,
-   {{< kbd Ctrl-Shift-C >}}: kijelölt sorok be- vagy kikommentelése,
-   {{< kbd Ctrl-Alt-Fel / Le >}} (és {{< kbd Shift+Jobbra / Balra >}}): a kurzor magasságának állítása (és az oszlopszélesség beállítása) több sor szerkesztésére,
-   {{< kbd Esc >}}: a `Konzol` panelen kilépés a folytatás promptból, a `Forrás` panelen kilépés a többsoros szerkesztésből,
-   {{< kbd Alt-Fel / Le >}}: sor mozgatása fel vagy le,
-   {{< kbd Alt-Shift-K >}}: billentyűparancsok módosítása,
-   {{< kbd Alt-- >}}: értékadó operátor (`<-`) beszúrása,
-   {{< kbd Ctrl-Shift-M >}}: pipe operátor (`|>`) beszúrása,
-   {{< kbd Ctrl-Enter >}}: az aktuális sor vagy a kijelölt rész futtatása,
-   {{< kbd Ctrl-Alt-R >}}: a teljes parancsállomány futtatása,
-   {{< kbd Ctrl-Shift-P >}}: a kurzor feletti csonkok parancsainak futtatása,
-   {{< kbd Ctrl-+ >}} / {{< kbd Ctrl-- >}}: betűméret nagyítása vagy kicsinyítése,
-   {{< kbd Ctrl-Shift-F10 >}}: a munkamenet újraindítása.

Ha valamelyik kombináció nem működik a számítógépünkön, akkor a `Tools / Modify Keyboard Shortcuts` menüpont alatt új billentyűparancsot adhatunk az ott felsorolt funkciókhoz.

::: {.callout-tip icon="false"}
## `r emoji("books")` Összefoglalás

Az adatelemzési munka során az *RStudio* -t használjuk projekt üzemmódban, miközben *Quarto* állományba gyűjtjük az elemző R parancsokat és az egyéb magyarázó és fejléc szövegeket. Ebben a fejezetben ezt a tételmondatot töltöttük meg tartalommal. Megismertük az *RStudio* integrált környezetét. A *Forrás* panel lehetséges lapjai a parancsállomány, a *Quarto* állomány és az adatbázis. A *Konzol* panel legfontosabb lapja a *konzol*, amely központi szerepet játszik a munka során, hiszen a {{< kbd Ctrl-Enter >}}-rel végrehajtott R parancsok eredménye és az esetleges hibaüzenetek is itt jelennek meg. A munka során a `.R` kiterjesztésű parancsállományok kiválóan alkalmasak a hosszabb elemzések R parancsainak tárolására, de ha a publikáláshoz is segítséget szeretnénk kapni, akkor inkább a a kötöttebb szerkezetű `.qmd` kiterjesztésű *Quarto* állományba rögzítsük parancsainkat. Az *RStudio* rutinszerű használatához a billentyűparancsok ismerete is hozzátartozik. A projektszemlélet az adatelemzéssel kapcsolatos állományok egyben tartásáról, és a hordozhatóság biztosításáról szól.
:::

::: {.callout-warning icon="false"}
## `r emoji("dart")` Feladatok

1.  Bizonyosodjunk meg róla, hogy az alapvető szövegszerkesztési ismeretek birtokában vagyunk. Ismerjük az `Insert` billentyű funkcióját? Találjunk legalább 8 módszert, amely kizárólag a billentyű segítségével mozgatja a szövegkurzort! A szövegkijelölésnek milyen billentyűparancsait ismerjük? Milyen karaktertörlési lehetőségeket ismerünk? Ismerjük mindhárom vágóasztal-művelet billentyűparancsát?
2.  Az *RStudio* mellett milyen más integrált fejlesztőeszközök léteznek az R-hez?
3.  Az `Appearance` menüpont `Editor theme` beállításával változtassunk az *RStudio* színösszeállításán. Keressük meg a legjobban hozzánk illőt! Vegyük figyelembe, hogy hosszútávon a minél sötétebb háttér a jó választás.

:::

## Segítség az R használatához `r emoji("thinking-face")` {#sec-segitseg-az-r-hez}

::: callout-note
## Miről lesz szó? Ebben a fejezetben

-   megismerjük az R hivatalos dokumentációit,
-   az ún. cheet-sheet forrásokat,
-   és a parancssorból elérhető súgó parancsokat.
:::

Az R használatához számos segítséget találunk az interneten, a telepített *Alap R*-ben és az *RStudio*-ban egyaránt. Az online segítségek közül elsősorban a <http://cran.r-project.org> címen olvasható R dokumentációkat emeljük ki, ahol több tucat, elsősorban angol nyelvű leírást találunk az R megismeréséhez. A bal oldali `Documentation / Manuals` menüpont alatt találjuk például az R hivatalos bevezető dokumentumát ([*An Introduction to R*](https://cran.r-project.org/doc/manuals/r-release/R-intro.html)), melynek tanulmányozása rendkívül nagy lépést jelenthet az R alaptudás megszerzéséhez. Az említett menüpont alatt találjuk még a [*contributed documentation*](https://cran.r-project.org/other-docs.html) linket is, amely számos rövidebb, és hosszabb dokumentációt tartalmaz, angol és más nyelveken. Itt találjuk Solymosi Norbert nagyszerű magyar nyelvű [R bevezetőjét](https://cran.r-project.org/doc/contrib/Solymosi-Rjegyzet.pdf) is.

Az R népszerűségének köszönhetően, nagyon sok további dokumentációt, tutoriált és példát találhatunk, ha az internetes keresőkhöz fordulunk. A fejezet végi egyik kitűzött feladatban összeállíthatjuk a saját listánkat.

Rendkívül népszerűek ma az ún. cheat-sheet-ek, amelyek néhány PDF oldalon sok ábrával, és a lényeg kiemelésével mutatják be egy-egy témakör legfontosabb tudnivalóit. Az *RStudio* `Help / Cheet Sheets` menüjéből, vagy közvetlenül a <https://www.rstudio.com/resources/cheatsheets/> címről számos R téma cheet-sheet-jét érhetjük el.

Most tekintsük át azokat a súgókat, amelyek az R parancssorából indíthatók. Az R megismerését kezdhetjük a

```{r eval=FALSE}
help.start()
```

paranccsal, ahol számos, az R nyelvet részletesen tárgyaló dokumentum közül választhatunk.

Ha csak egyetlen függvénnyel kapcsolatban szeretnénk segítséget kérni, akkor használhatjuk a beépített súgórendszer parancsait. Adjuk ki a

```{r eval=FALSE}
help(t.test)
```

vagy a rövidebb

```{r eval=FALSE, tidy=FALSE}
 ?t.test
```

parancsot, ha a `t.test()` függvényről szeretnénk részletes leírását kapni. A `?függvénynév` lehetőség, minden függvény esetében rendelkezésre áll a súgó kikérésére. Abban az esetben, ha nem ismerjük teljesen a függvény nevét, használhatjuk a

```{r eval=FALSE}
help.search("test")
```

parancsot, ekkor az összes olyan függvényt kilistázhatjuk, amelynek a nevében vagy a leírásában a `test` karaktersorozat előfordul.

Hasznos lehet továbbá a `find()` parancs, amely elárulja, hogy az illető függvény melyik már betöltött csomagban foglal helyet.

```{r}
find("aov")
```

A fenti példából kiolvasható, hogy az `aov()` függvény a `{stats}` csomagban található.

Ugyancsak a betöltött csomagokban végez keresést az `apropos()` függvény, amellyel lehetőség van a parancssorból elérhető függvények vagy objektumok nevében keresni.

```{r}
apropos("aov")
```

Tovább segítheti az egyes függvények használatának elsajátítását az `example()` parancs, amely az egyes függvények használatára mutat példát.

```{r eval=FALSE}
example(t.test)
```

Utolsó lehetőségként ejtsünk szót a `demo()` függvényről, amellyel olyan beépített szkripteket futtathatunk, amelyek az R tudását, erejét hivatottak demonstrálni. Próbáljuk ki a következő parancsokat.

```{r eval=FALSE}
demo(graphics)
demo(persp)
demo(plotmath)
demo(Hershey)
```

::: {.callout-tip icon="false"}
## `r emoji("books")` Összefoglalás

Az *RStudio* a parancsok gépelését számos módon könnyíti meg, de ha egy függvényről részletesebb leírást szeretnénk olvasni, akkor a `?függvénynév` parancsot is használjuk. Egy-egy témakör gyors megismeréséhez a puskákat (cheet-sheet) ajánljuk, amelyek az *RStudio* `Help / Cheet Sheets` menüjéből is elérhetők. Az R hivatalos honlapján hosszabb leírásokat is találunk.
:::

::: {.callout-warning icon="false"}
## `r emoji("dart")` Feladatok

1.  Keressünk magyar nyelvű leírásokat az R-hez!
2.  A közösségi médiában melyek az R legfontosabb fórumai?
3.  Hogyan indíthatjuk el egy csomag beépített súgóját? Ismerjük meg így a `{fun}` csomagot!
:::

## Az *Alap R* használata `r emoji("exploding-head")` {#sec-alap-r-hasznalata}

::: callout-note
## Miről lesz szó? Ebben a fejezetben

-   megtanuljuk az *Alap R*-ben a konzol,
-   és a parancsállományok használatát,
-   az *R Commander* kezelését,
-   valamint a kötegelt feldolgozás módszereit.
:::

Amennyiben nagygépes környezetben dolgozunk, vagy valamilyen oknál fogva az *RStudio*-t nem tudjuk használni, akkor az *Alap R* lehet az egyetlen lehetőség R parancsok futtatására. Ebben az esetben sajnos le kell mondanunk a parancsok kényelmes bevitelét és végrehajtását támogató interaktív eszközökről, de természetesen az R teljes ereje, összes függvénye továbbra is rendelkezésünkre áll. Ebben a részben az *Alap R* lehetőségeit tekintjük át.

Az *Alap R* elindítása az adott platformon a megfelelő bináris állomány futtatását jelenti.

-   Windows operációs rendszerekben az R indítása többnyire az Asztalon lévő R ikon segítségével lehetséges. Ez az `RGui.exe` grafikus felhasználói felülettel rendelkező alkalmazást indítja, amelynek legfontosabb része a külön ablakban (*R Console*) megjelenő konzol ([-@fig-konzol-win]. ábra).
-   MacOs környezetben indítsuk el az `R.app` alkalmazást, amely egyetlen konzolt tartalmaz.
-   Linux környezetben az `R` parancs futtatásával szintén egy konzolt kapunk.

### A konzol használata {#az-rgui-konzol}

A konzol az *Alap R* környezet központi része mindegyik platformon. A konzol működése lényegében megegyezik a korábban megismert *RStudio*-s konzol működésével: egysoros parancsokat gépelünk be a prompt (`>`) után, {{< kbd Enter >}}-t nyomunk, majd az R interpreter értelmezi és végrehajtja a begépelt parancsot, és megjelenik az eredmény. A [-@fig-konzol-win]. ábrán a Windows környezetben használható *RGui* alkalmazás látható, miután a konzolba két parancsot gépeltünk be és hajtottunk végre.

```{r fig.align='center', echo=FALSE, out.width='70%', fig.link='', fig.cap="RGui alkalmazás a konzollal Windows környezetben"}
#| label: fig-konzol-win

knitr::include_graphics('images/konzol_win.png', dpi = NA)
```

Az *RStudio* konzoljának minden korábban említett alapfunkciója az *Alap R* konzoljában is elérhető, tudjuk használni a parancsok történetét, a kódkiegészítést a {{< kbd TAB >}} billentyűvel, és a folytatás prompt (`+`) is megjelenik befejezetlen sorok esetén. Sőt a Windows alatt futó *RGui* ismeri a parancsállományokat is, bár a gépeléshez korántsem kapunk annyi támogatást mint az *RStudio*-ban.

### Parancsállományok az *RGui*-ban

Az *RGui* a Windows-os *Alap R* része, és ahogyan láthattuk, egy nagyon egyszerű grafikus környezet, amelynek központjában a konzol található (*R Console* ablak a [-@fig-konzol-win]. ábrán). Az *RGui* nagyszerű tulajdonsága, hogy támogatja a parancsállományok használatát. Az *RGui*-ban találunk menüpontokat (`Fájl / Új szkript`, `Fájl / szkript megnyitása` és `Fájl / Ment`), amelyekkel létrehozhatunk, megnyithatunk, és elmenthetünk parancsállományokat. Tudjuk, hogy a parancsállományok használata lényegesen leegyszerűsíti az adatelemzés folyamatát, de fontos műveletként jelenik meg az átirányítás, amely a szövegszerkesztőben összegyűjtött parancsokat vezeti át a konzolba. Az *RGui*-ban ez a {{< kbd Ctrl-R >}} billentyűkombinációval lehetséges -- ez gyakorlatilag az *Rstudio*-beli {{< kbd Ctrl-Enter >}} --, de a `Szerkesztés / Sor vagy kijelölés futtatása` vagy az `Szerkesztés / Minden futtatása` menüpontok is rendelkezésre állnak. A soronkénti végrehajtás mellett itt is lehetőség van kijelölt szövegrészek végrehajtására, de több sort, a teljes parancsállományt, vagy valamelyik sor egy részét is elküldhetjük a konzolba a {{< kbd Ctrl-R >}} segítségével.

### *R Commander*

Eddig az R használatának két lényegesen eltérő módját mutattuk be: a konzolos használatot és a parancsállományos használatot (a *Quarto* állományok használatát is ez utóbbi csoportba sorolhatjuk). Láttuk, hogy a konzol az *RStudio* és az *Alap R* központi része, de az *RStudio* és az *RGui* a parancsállományos használatot is támogatja. Mindegyik fenti használati mód parancsok gépelésével jár együtt.

Azonban létezik egy harmadik, az eddigiektől lényegesen eltérő módja az R használatának. Parancsok gépelése nélkül, csupán egérkattintássokkal is végezhetünk statisztikai elemzést. Az R erre alkalmas beépített eszközét *R Commander*-nek nevezik, de külső eszközök is képesek az R parancssoros lényét elfedni előlünk. Ilyen külső eszköz például a [*jamovi*](https://www.jamovi.org/) és a [*JASP*](https://jasp-stats.org/). Mindhárom felsorolt eszközben közös, hogy grafikus felhasználói felületen mozgunk, és egérkattintással, menüben való navigálással, vezérlőelemek (rádiógombok, jelölőnégyzetek, listák, nyomógombok, beviteli mezők) használatával magyarázzuk el a kívánt tevékenységet.

A továbbiakban az *R Commander* lehetőségeit tekintjük át röviden. Az *R Commander* az `{Rcmdr}` nevű csomagban foglal helyet, így használatához ezt a csomagot telepítenünk kell. Ezt követően a `library()` függvény segítségével tudjuk elindítani az *R Commander*-t:

```{r eval=FALSE, tidy=FALSE}
# install.packages("Rcmdr")  # R Commander telepítése
library(Rcmdr)               # R Commander indítása
```

Az indítás után egy külön *R Commander* ablak jelenik meg ([-@fig-rcommander-1]. ábra), melynek felépítése fentről lefelé a következő: (1) a gazdag menürendszer, (2) az eszköztár az aktuális adatbázis (`Adattábla`) mezővel és az `Adattábla megtekintése` gombokkal, (3) a parancsállomány vagy *R Markdown* lapok (a *Quarto* elődje), (4) az output számára fenntartott szöveges mező, és (5) az üzenetek helye. Megjegyezzük, hogy a [-@fig-rcommander-1]. ábrán látható *R Commander*-t az *Alap R*-ből indítottuk. Amennyiben *RStudio*-ból adjuk ki a `library(Rcmdr)` parancsot, akkor a 4. és az 5. elem, azaz az output és az üzenetek rész nem lesz látható, mert az *RStudio* konzolja ezeket magába integrálja.

```{r fig.align='center', echo=FALSE, out.width='85%', fig.link='', fig.cap="Az R Commander induló ablaka"}
#| label: fig-rcommander-1

knitr::include_graphics('images/rcommander_1.png', dpi = NA)
```

A kilépést az *R Commander*-ből a `File / Kilépés` menüpont segítségével kezdeményezhetjük. Kilépés után az *R Commander* újraindításához a következő parancsokat kell használnunk:

```{r eval=FALSE}
# ha véletlenül bezártuk az R Commander-t
detach(package:Rcmdr)
library(Rcmdr)
```

Az *R Commander* lényegét a legkönnyebben úgy tudjuk szemléltetni, ha egérkattintásokkal is megoldjuk a *Csillagok háborúja* c. filmmel kapcsolatos adatelemzési feladatunkat. Első lépésként telepítsük a `{dplyr}` csomagot. Természetesen, ha már korábban a telepítést bármilyen apropóból elvégeztük, akkor ezt nem kell megismételni, de a teljesség kedvéért kezdjük azzal, hogyan tudunk interaktívan csomagot telepíteni. Az *RGui*-ban válasszuk ki a `Csomagok / Csomag(ok) telepítése` menüpontot, ha szükséges válasszunk a tükörszerverek közül, majd válasszuk ki a megjelenő listából a `{dplyr}` csomagot. Ezt követően már *R Commander*-ben töltsük be a `{dplyr}` csomagot az `Eszközök / Csomag(ok) betöltése` menüponttal. Keressük meg a listában a `{dplyr}` csomagnevet és kattintsunk az {{< kbd OK >}} gombon. Ezt követően olvassuk be a `starwars` adatbázist a `{dplyr}` csomagból, az `Adatok / Csomagban lévő adatok / Adattábla beolvasása betöltött csomagból` menüpont segítségével. Kattintsunk duplán a `{dplyr}` csomagneven, majd a jobb oldali listában szintén duplán a `starwars` adatbázison, majd az {{< kbd OK >}} gombbal fejezzük be a műveletet. Figyeljük meg, hogy az `R szkript` és `R Markdown` lapok tartalmazni fogják az egérrel elmutogatott tevékenységeinknek megfelelő R parancsokat, illetve az output és üzenetek részben ezek végrehajtásáról is értesítést kapunk.

Még egy rendkívül fontos dolog történt a `{dplyr}` csomag `starwars` adatbázisának beolvasása után. Az eszköztárban az `Adattábla` részben már nem a `Nincs aktív adattábla` szöveg szerepel, hanem a `starwars` adatbázis neve. Azt kell megjegyeznünk az *R Commander* használata során, hogy mindig van egy kitüntetett, aktív adattáblánk, és minden további tevékenység, amit a menüpontok segítségével el tudunk érni, az erre a kitüntetett, aktív adattáblára vonatkozik. Az aktív adattáblát le lehet cserélni. Amennyiben nyitnánk egy másik adatbázist, akkor a `starwars` feliratú gombon kattintva, egy listából kiválaszthatnánk, hogy melyik adatbázisunk legyen az *R Commander*-ben aktív.

Folytassuk az adatelemzést az `Elemzések / Összegzések / Numerikus változók összegzése` menüpont kiválasztásával. A megjelenő dialógusdobozból válasszuk ki a `height` változót, az `Összegzés csoportonként` gombon kattintva pedig a `species` változót. Az {{< kbd OK >}} gombok megnyomása után az output részben látjuk az elemzés eredményét.

Az *R Commander* nagyon hatékony eszköz gyors elemzések, egyszerű adatbetekintések elvégzésére. Számos menüpontot kínál az adatok beolvasásához, előkészítéséhez és az elemzéséhez. Ráadásul az egyes menüpontokban elmutogatott tevékenységek R parancsait is szorgalmasan gyűjti, így azokat a `File / Szkript mentése` vagy `File / R Markdown mentése` kiválasztásával, el is tudjuk menteni magunk számára. Az *R Commander* vagy a *jamovi* és *JASP* ismerete nagyban hozzájárul a hatékony adatelemzéshez.

Végül megemlítjük, hogy az *R Commander* tudása kibővíthető beépülő modulok (plugin-ek) segítségével. Ezek új menüpontokat, dialógusdobozokat és természetesen új függvényeket tartalmaznak. A beépülő modulok csomagok formájában érhetők el. Például az `Easy R` beépülő modul telepítéséhez az `RcmdrPlugin.EZR` csomagra van szükség.

```{r eval=FALSE}
# egy beépülő modul telepítése 
install.packages("RcmdrPlugin.EZR")
```

Telepítés után a beépülő modul betöltésére is szükség van, csak így tudjuk az új funkciókat elérni. Ezt az `Eszközök / Rcmdr plugin(ok) betöltése` menüpontban tehetjük meg. Az *R Commander* újraindulása után, már az új menüszerkezetet fogjuk látni. Az [*R Commander hivatalos oldalán*](https://socialsciences.mcmaster.ca/jfox/Misc/Rcmdr/) részletesebb információkat olvashatunk.

### Kötegelt futtatás

Ha felidézzük az eddig tanultakat az R használati módjairól, akkor világos, hogy mindegyik az interaktív használathoz kötődik. Egy tipikus adatelemzési munka során pontosan erre van szükség: kezdeményezzük egy művelet végrehajtását és várjuk az eredményt. Újabb művelet, újabb output. Ezt a fajta interaktív használatot láttuk a konzolban, a parancsállományok és *Quarto* állományok esetén, valamint az *R Commander*-ben is. Azonban az interaktív használat mellett beszélünk ún. kötegelt feldolgozásról is. Ez azt jelenti, hogy egy parancsállomány összes sorát egyetlen lépésben hatjuk végre. Nem vagyunk kíváncsiak a soronkénti eredményekre, a teljes szkriptállomány futtatása ad olyan eredményt, amelyre nekünk éppen szükségünk van. Kötegelt futtatásra a `source()` függvényt használhatjuk, valamint az *Alap R* egy külső alkalmazását, az `Rscript` programot.

Tegyük fel, hogy egy `netflix.R` parancsállományban összegyűjtöttük az összes olyan R sort, amely egyetlen ábra létrehozásához szükséges. Ez az ábra meglehetősen összetett, mert az egyes években megjelent filmek és sorozatok számát tartalmazza, és viszonylag sok adatelőkészítési műveletet előzte meg. Ezek nem mindig izgalmasak számunkra, annál inkább maga az ábra, amelynek létrehozása a `netflix.R` egyetlen célja.

A következő sort az *Alap R* vagy az *RStudio* konzoljába/parancsállományába, vagy az *RStudio* *Quarto* állományába is elhelyezhetjük. A `source()` függvény a `netflix.R` minden sorát végrehajtja és reményeink szerint előállítja a kívánt ábrát.

```{r eval=FALSE}
source("netflix.R", echo = T)
```

A `source()` függvény kicsit másként közelít a parancsainkhoz, mint amit megszoktunk az interaktív konzolos és parancsállományos használat során. A `source()` először a teljes állományban ellenőrzi a parancsok szintaktikai helyességét, és csak akkor kezdi el az első majd az azt követő parancsok végrehajtásához, ha mindent rendben talált.

Másik lehetőség parancsállomány kötegelt futtatására, az `RScript` program, amely ugyanúgy az *Alap R* része, mint a konzol vagy az interpreter. Az operációs rendszer parancssorából kell kiadnunk a következő parancsot:

``` markdown
Rscript --vanilla netflix.R > output.txt
```

A fenti sor hatására ugyanúgy létrejön a kívánt ábra, de az `output.txt`-ben megkapjuk a futás közben keletkező egyéb outputokat is.

Kötegelt feldolgozásra viszonylag ritkán van szükségünk, akkor is többnyire nagygépes környezetben. Az interaktív használat a legtöbb adatelemzési munka során elegendő rugalmasságot ad.

::: {.callout-tip icon="false"}
## `r emoji("books")` Összefoglalás

Amennyiben az *RStudio* használatára nincs lehetőségünk, akkor az *Alap R* eszközeivel is kiválóan megoldhatjuk adatelemzési feladatainkat. A konzol és az *RGui* parancsállományai interaktív parancsvégrehajtást biztosítanak, a `source()` függvény és az `RScript` alkalmazás pedig az `.R` kiterjesztésű parancsállományok kötegelt feldolgozását segíti. Az *R Commander* menüparancsai gépelése nélkül teszik lehetővé elemzések végrehajtását, mindössze a megfelelő almenüpontot kell kiválasztani, majd a dialógusdobozban elvégezni a szükséges beállításokat. Érdemes kipróbálni a *jamovi* és a *JASP* statisztikai programokat is, amelyek R-t használnak a háttérben, de szintén grafikus felhasználói felülettel rendelkeznek.
:::

::: {.callout-warning icon="false"}
## `r emoji("dart")` Feladatok

1.  Foglaljuk össze az R használati módjait! Soroljuk fel mind a négy lehetőséget!
2.  Hasonlítsuk össze a parancsállományok használatát *RGui*-ban és *RStudio*-ban!
3.  Hasonlítsuk össze a parancsállományok és a *Quarto* / *R Markdown* használatát *R Commander*-ben és *RStudio*-ban!
4.  Töltsük le és telepítsük az ingyenesen elérhető *jamovi* és a *JASP* statisztikai programokat, majd nyissuk meg a beépített adatbázisait, és végezzünk néhány egyszerűbb elemzést! Ha elakadunk, keressünk videótutoriált az eszközök használatáról. Melyik eszköz tetszik jobban? Miben hasonlítanak és miben térnek el?
:::
